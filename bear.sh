#!/bin/sh
# script which do simulate reads with bear. 

module load bear
module load perl/5.18.4  

liste_fichiers=`ls /home/jennifer/classif_metag_benchmark/data/*.fna`
Model_error= #path of the file of model error 

for fichier in $liste_fichiers
do

#First step: Parametric abundance profile generation,
#this step generate abundance values from power functions that can correspond to metagenomic communities.
#Need multi-Fasta file of genome.
#Bear support low, medium, high complexity communities derived from power functions.

parametric_abundance.pl /home/jennifer/classif_metag_benchmark/data/$fichier high  /home/jennifer/classif_metag_benchmark/data/abundance_$fichier

#Error model generation with drisee.py
#read_min = minimum bin size of duplicate read
#num_max= Maximum number of prefix bins to process
#read_max= Maximum number of reads to process from each bin of prefix identical reads
#nr= total number of read in the dataset
#model error = multi fastq file of WGS read.
#error_rate_file= outputs files ( one in format .per and one in format .uc) 

drisee.py --percent -n read_min -b num_max -x read_max -t fastq -s nr $Model_error /home/jennifer/classif_metag_benchmark/data/rate_file_$fichier

#Generation of the quality score models for erroneous nucleotides
#This command generate two file : 
# - a quality model file which contains quality scores in place of error rates (.err.qual extension)
# - a matrix file which contain two 4*4 matrice (.err.matr extension)
#model error=  multi fastq file of WGS read.
#error_rate_file.uc= file generated by drisee.py command

error_quality.pl $Model_error /home/jennifer/classif_metag_benchmark/data/rate_file_$fichier".uc"

#Generation of uniform-lenght simulated reads from a multi-Fasta file of genome sequences. 
#-r <genomes file> Multi-FASTA file containing genomic sequences from which reads will be
#sampled.
#-a <abundance file> Tab-delimited abundance file with an abundance value for each corresponding
#genome sequence in <reference fasta>. Can be generated by
#following step 1a or 1b.
#-o <output file> Name for output file containing simulated uniform-length reads.
#-t <total reads> The total number of reads to sample from all genomes.
#-l <longest read> The length, in bp, of the longest possible read to simulate.
#The following parameters are optional:
#Parameter Description
#-i <insert mean length> Average length of insert for paired-end reads. Default value: 0
#-s <insert stddev> Standard deviation of insert length for paired-end reads. Default

generate_reads.py -r /home/jennifer/classif_metag_benchmark/data/$fichier -a /home/jennifer/classif_metag_benchmark/data/abundance_$fichier  -o reads_$fichier -t total reads -l longest read  

#Trims of the reads from the previous step, introduces sequencing errors, and generates
#quality scores
#-i <WGS read file> FASTQ file from which the error and quality models were derived. In this
#script, it is used to generate quality scores for non-erroneous nucleotides.
#-f <fasta file> Read file to be trimmed and subjected to errors and quality score generation.
#This should be the FASTA file containing the uniform-length reads
#generated in Step 4.
#-o <output file> Name for output FASTQ file containing the simulated data.
#-r <error rate file> Generates erroneous nucleotides. The error rate file (with .per extension)
#was generated by DRISEE in Step 2. If Step 2 was not performed,
#use -r 0 for a simple error model.
#-q <quality model file> Generates quality scores for erroneous nucleotides. The error quality
#value file was generated by error quality.py in Step 3. If Step 3 was
#not performed, use -q 0 for a simple quality score model.
#-m <matrix file> Determines transition/transversion rates for substitution errors and
#nucletotide-specific insertion errors. This should be the <matrix file>
#generated by error quality.py in Step 3. If Step 3 was not performed,
#use -m 0 to assume that rates are equal among all nucleotides.

trim_reads.py -i $Model_error -f /home/jennifer/classif_metag_benchmark/data/$fichier -o simulation_$fichier -r /home/jennifer/classif_metag_benchmark/data/rate_file_$fichier".per" -q $Model_error".err.qual"  -m $Model_error".err.matr" 
